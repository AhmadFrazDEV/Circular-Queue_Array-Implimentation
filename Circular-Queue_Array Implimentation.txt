class MyCircularQueue {
public:
    int myQueue[10];
    int front  = 0 , rear = -1;
    MyCircularQueue(int k) {
        
    }
    
    bool enQueue(int value) {
        if(isFull()) return false;
        if(isEmpty()) front++;
        rear = (rear + 1) % 10;
        myQueue[rear] = value;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()) return false;
        int value = myQueue[front];
        if(front == rear)
        {
            front = -1;
            rear = -1;
        }
        front = (front + 1) % 10;
        return true;
    }
    
    int Front() {
       return isEmpty() ? -1 : myQueue[front];
    }
    
    int Rear() {
        return isEmpty()? -1 : myQueue[rear];
    }
    
    bool isEmpty() {
        return rear == -1;
    }
    
    bool isFull() {
        return !isEmpty() && (front + 1) % 10 == rear;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */